import { Mongo } from 'meteor/mongo';
import { SimpleSchema } from 'meteor/aldeed:simple-schema';
import { SchemaHelpers } from '../schema_helpers.js';
import { CapacityPlanSprintBlocks } from './capacity_plan_sprint_blocks';
import { ImportedItemCrumbs } from '../imported_items/imported_item_crumbs';

/**
 * ============================================================================
 * CapacityPlanStrategicEffortItems
 * ============================================================================
 */
export const CapacityPlanStrategicEffortItem = new SimpleSchema({
  planId        : {
    type: String
  },
  effortId      : {
    type: String
  },
  title         : {
    type: String
  },
  itemIdentifier: {
    type    : String,
    optional: true
  },
  estimate      : {
    type    : Number,
    decimal : true,
    optional: true
  },
  blockedBy     : {
    type    : [ String ],
    optional: true
  },
  autoGenerated : {
    type        : Boolean,
    defaultValue: false
  },
  // Standard tracking fields
  dateCreated   : {
    type     : Date,
    autoValue: SchemaHelpers.autoValueDateCreated
  },
  createdBy     : {
    type     : String,
    autoValue: SchemaHelpers.autoValueCreatedBy
  },
  dateModified  : {
    type     : Date,
    autoValue: SchemaHelpers.autoValueDateModified
  },
  modifiedBy    : {
    type     : String,
    autoValue: SchemaHelpers.autoValueModifiedBy
  }
  
});

export const CapacityPlanStrategicEffortItems = new Mongo.Collection("capacity_plan_strategic_effort_items");
CapacityPlanStrategicEffortItems.attachSchema(CapacityPlanStrategicEffortItem);
ChangeTracker.trackChanges(CapacityPlanStrategicEffortItems, 'CapacityPlanStrategicEffortItems');

// These are server side only
CapacityPlanStrategicEffortItems.deny({
  remove () {
    return true;
  },
  insert () {
    return true;
  },
  update () {
    return true;
  }
});

/**
 * Helpers
 */
CapacityPlanStrategicEffortItems.helpers({
  // Get the contributor blocks that this is mapped to for the various options
  contributorBlocks () {
    return CapacityPlanSprintBlocks.find({ dataId: this._id }).map((block) => {
      return block.parent()
    })
  },
  itemTitle () {
    if (this.itemIdentifier) {
      let item = ImportedItemCrumbs.findOne({ identifier: this.itemIdentifier });
      return item && item.title || this.title
    } else {
      return this.title
    }
  }
});