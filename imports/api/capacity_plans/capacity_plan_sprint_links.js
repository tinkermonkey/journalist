import { Mongo }                    from 'meteor/mongo';
import SimpleSchema                 from 'simpl-schema';
import { Auth }                     from '../auth';
import { CapacityPlanSprintBlocks } from './capacity_plan_sprint_blocks';
import { CapacityPlanBlockTypes }   from './capacity_plan_block_types';
import { Contributors }             from '../contributors/contributors';

/**
 * ============================================================================
 * CapacityPlanSprintLinks
 * ============================================================================
 */
export const CapacityPlanSprintLink = new SimpleSchema({
  planId       : {
    type: String
  },
  optionId     : {
    type: String
  },
  sourceId     : {
    type: String
  },
  sourceType   : {
    type         : SimpleSchema.Integer,
    allowedValues: _.values(CapacityPlanBlockTypes)
  },
  targetId     : {
    type: String
  },
  targetType   : {
    type         : SimpleSchema.Integer,
    allowedValues: _.values(CapacityPlanBlockTypes)
  },
  sourceSprint : {
    type    : SimpleSchema.Integer,
    optional: true
  },
  targetSprint : {
    type: Number
  },
  autoGenerated: {
    type        : Boolean,
    defaultValue: false
  }
});

export const CapacityPlanSprintLinks = new Mongo.Collection('capacity_plan_sprint_links');
CapacityPlanSprintLinks.attachSchema(CapacityPlanSprintLink);
ChangeTracker.trackChanges(CapacityPlanSprintLinks, 'CapacityPlanSprintLinks');

// Server side only for now
CapacityPlanSprintLinks.deny({
  remove: Auth.denyIfNotAdmin,
  insert: Auth.denyIfNotAdmin,
  update: Auth.denyIfNotAdmin
});

/**
 * Helpers
 */
CapacityPlanSprintLinks.helpers({
  source () {
    switch (this.sourceType) {
      case CapacityPlanBlockTypes.effort:
      
      default:
        return CapacityPlanSprintBlocks.findOne(this.sourceId) || Contributors.findOne(this.sourceId)
    }
  },
  target () {
    return CapacityPlanSprintBlocks.findOne(this.targetId)
  }
});